@inject HttpClient httpClient
@inject EventAggregator.Blazor.IEventAggregator eventAggregator
@implements EventAggregator.Blazor.IHandle<Blazor.Events.CurrentTerminChanged>

<h2>Prihlaseni</h2>


@if (State.AktualniTerminId == null)
{
	<p><em>Termín není zvolen.</em></p>
}
else
{
    if (State.IsLoading)
    {
		<p><em>Načítám detaily termínu...</em></p>
    }

    if (State.LoadingFailed)
    {
		<p><em>Načtení detailu termínu se nezdařilo.</em></p>
    }
}

@if (State.Prihlaseni != null)
{
	<h2>Přihlášení</h2>
	<div>

		@foreach (var prihlaseny in State.Prihlaseni)
{
			<p>@prihlaseny.PrijmeniJmeno</p>
}

		@if (State.Prihlaseni.Count == 0)
{
			<span>Na termín není dosud nikdo přihlášen.</span>
}
	</div>
}

@if (State.Neprihlaseni != null)
{
	<h2>Nepřihlášení</h2>
	<div>
		@foreach (var neprihlaseny in State.Neprihlaseni)
{
			<p>@neprihlaseny.PrijmeniJmeno</p>
}
	</div>
}


	<div>
		TerminId: @State.AktualniTerminId
	</div>

	@functions {
        protected PrihlasovaniState State { get; } = new PrihlasovaniState();

        protected override void OnInitialized()
        {
            base.OnInitialized();
            eventAggregator.Subscribe(this);
        }

        public async Task HandleAsync(KandaEu.Blazor.Events.CurrentTerminChanged message)
        {
            State.AktualniTerminId = message.TerminId;

            try
            {
                State.IsLoading = true;
                State.Prihlaseni = null;
                State.Neprihlaseni = null;

                System.Threading.Thread.Sleep(1000);

                var terminDetail = await httpClient.GetJsonAsync<KandaEu.Volejbal.Contracts.Terminy.Dto.TerminDetailDto>($"http://localhost:9901/api/terminy/{message.TerminId}");

                State.Prihlaseni = terminDetail.Prihlaseni;
                State.Neprihlaseni = terminDetail.Neprihlaseni;
            }
            catch
            {
                State.LoadingFailed = true;
            }
            finally
            {
                State.IsLoading = false;
            }

        }
}